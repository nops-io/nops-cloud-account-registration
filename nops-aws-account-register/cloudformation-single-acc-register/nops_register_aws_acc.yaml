AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation template to register AWS account to nOps"

Parameters:
  ReportName:
    Type: String
    Default: nopsbilling-daily-gzip
    Description: nOps daily generated report name.

  s3prefix:
    Type: String
    Default: something
    Description: nOps daily generated reports folder prefix.

  BucketName:
    Type: String
    Default: nopsbucketforcostusagereports
    Description: s3 bucket name for nOps daily cost usage reports (CUR).

  nOpsApiKey:
    Type: String
    NoEcho: true
    Description: nOps api key to register AWS accounts.

  nOpsPrivateKey:
    Type: String
    NoEcho: true
    Default: ""
    Description: nOps private key to generate signature for api request, it should be single line string eg.'\n' (optional).

  pGithubReleaseVersion:
    Type: String
    Default: v0.4.0
    Description: github release version.

Resources:
  nopsLambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "InlinePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaGenUUID:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "nops-cloud-account-registration-${AWS::Region}"
        S3Key: !Sub "generate_external_id-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "generate_external_id.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 150
      FunctionName: "generate-external-id"
    DependsOn:
      - nopsLambdaExecutionRole

  PermissionLambdaGenUUID:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt [LambdaGenUUID, Arn]
      Principal: "cloudformation.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn:
      - LambdaGenUUID

  TriggerLambdaGenUUID:
    Type: Custom::TriggerLambdaGenUUID
    Properties:
      ServiceToken: !GetAtt [LambdaGenUUID, Arn]
    DependsOn:
      - PermissionLambdaGenUUID

  nopsAccessIamRole:
    Type: "AWS::IAM::Role"
    DependsOn:
      - TriggerLambdaGenUUID
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: "202279780353"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: !GetAtt TriggerLambdaGenUUID.external_id
      Path: "/"
      ManagedPolicyArns: ["arn:aws:iam::aws:policy/ReadOnlyAccess"]
      Tags:
        - Key: version
          Value: 1.0.16
        - Key: createdat
          Value: 20230321

  nopsIntegrationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "InlinePolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - cur:DescribeReportDefinitions
              - cur:DeleteReportDefinition
              - cur:PutReportDefinition
              - ce:ListCostAllocationTags
              - ce:UpdateCostAllocationTagsStatus
              - events:CreateEventBus
              - organizations:InviteAccountToOrganization
              - s3:HeadBucket
              - s3:HeadObject
              - support:DescribeTrustedAdvisorCheckRefreshStatuses
              - support:DescribeTrustedAdvisorCheckResult
              - support:DescribeTrustedAdvisorChecks
              - wellarchitected:*
            Effect: "Allow"
            Resource: "*"
          - Action:
              - acm-pca:Describe*
              - acm-pca:Get*
              - acm-pca:List*
              - acm:Describe*
              - acm:Get*
              - acm:List*
              - apigateway:GET
              - appconfig:GetConfiguration*
              - appflow:DescribeConnector*
              - appflow:ListConnector*
              - appstream:DescribeDirectoryConfigs
              - appstream:DescribeUsers
              - appstream:DescribeSessions
              - appsync:Get*
              - appsync:List*
              - athena:Get*
              - athena:List*
              - backup:GetBackupVaultAccessPolicy
              - cassandra:Select
              - chime:Describe*
              - chime:Get*
              - chime:List*
              - cloud9:Describe*
              - cloud9:Get*
              - cloud9:List*
              - clouddirectory:Get*
              - clouddirectory:List*
              - cloudfront:GetCloudFrontOriginAccessIdentity
              - cloudfront:GetFieldLevelEncryption*
              - cloudfront:GetKeyGroupConfig
              - cloudwatch:GetMetricData
              - cloudwatch:GetMetricStream
              - cloudwatch:ListMetricStreams
              - codeartifact:GetAuthorizationToken
              - codeartifact:ReadFromRepository
              - codebuild:BatchGet*
              - codebuild:ListSourceCredentials
              - codecommit:BatchGet*
              - codecommit:Get*
              - codecommit:GitPull
              - codedeploy:BatchGet*
              - codedeploy:Get*
              - codestar:DescribeUserProfile
              - codestar:ListUserProfiles
              - cognito-identity:*
              - cognito-idp:*
              - cognito-sync:*
              - comprehend:Describe*
              - comprehend:List*
              - config:BatchGetAggregateResourceConfig
              - config:BatchGetResourceConfig
              - config:SelectAggregateResourceConfig
              - config:SelectResourceConfig
              - connect:Describe*
              - connect:Get*
              - connect:List*
              - datapipeline:DescribeObjects
              - datapipeline:EvaluateExpression
              - datapipeline:QueryObjects
              - dax:BatchGetItem
              - dax:GetItem
              - dax:Query
              - deepcomposer:Get*
              - deepcomposer:List*
              - devicefarm:GetRemoteAccessSession
              - devicefarm:ListRemoteAccessSessions
              - directconnect:Describe*
              - directconnect:List*
              - discovery:Describe*
              - discovery:Get*
              - discovery:List*
              - dms:Describe*
              - dms:List*
              - ds:Get*
              - dynamodb:GetItem
              - dynamodb:BatchGetItem
              - dynamodb:Query
              - dynamodb:Scan
              - ec2:GetConsoleScreenshot
              - ecr:BatchGetImage
              - ecr:GetAuthorizationToken
              - ecr:GetDownloadUrlForLayer
              - ecr-public:GetAuthorizationToken
              - eks:DescribeIdentityProviderConfig
              - elasticbeanstalk:DescribeConfigurationOptions
              - elasticbeanstalk:DescribeConfigurationSettings
              - es:ESHttpGet*
              - fis:GetExperimentTemplate
              - fms:GetAdminAccount
              - frauddetector:BatchGetVariable
              - frauddetector:Get*
              - gamelift:GetGameSessionLogUrl
              - gamelift:GetInstanceAccess
              - geo:ListDevicePositions
              - glue:GetSecurityConfiguration*
              - glue:SearchTables
              - glue:GetTable*
              - guardduty:GetIPSet
              - guardduty:GetMasterAccount
              - guardduty:GetMembers
              - guardduty:ListMembers
              - guardduty:ListOrganizationAdminAccounts
              - inspector2:GetConfiguration
              - imagebuilder:GetImage
              - iotroborunner:Get*
              - iotsitewise:ListAccessPolicies
              - ivs:GetPlaybackKeyPair
              - ivs:GetStreamSession
              - kafka:GetBootstrapBrokers
              - kendra:Query*
              - kinesis:Get*
              - kms:DescribeKey
              - kms:GetPublicKey
              - lex:Get*
              - lambda:GetFunctionConfiguration
              - license-manager:GetGrant
              - license-manager:GetLicense
              - license-manager:ListTokens
              - lightsail:GetBucketAccessKeys
              - lightsail:GetCertificates
              - lightsail:GetContainerImages
              - lightsail:GetKeyPair
              - lightsail:GetRelationalDatabaseLogStreams
              - logs:GetLogEvents
              - logs:StartQuery
              - machinelearning:GetMLModel
              - macie2:GetAdministratorAccount
              - macie2:GetMember
              - macie2:GetMacieSession
              - macie2:SearchResources
              - macie2:GetSensitiveDataOccurrences
              - mobilehub:ExportProject
              - nimble:GetStreamingSession
              - polly:SynthesizeSpeech
              - proton:GetEnvironmentTemplate
              - proton:GetServiceTemplate
              - proton:ListServiceTemplates
              - proton:ListEnvironmentTemplates
              - qldb:GetBlock
              - qldb:GetDigest
              - rds:Download*
              - rekognition:CompareFaces
              - rekognition:Detect*
              - rekognition:Search*
              - resiliencehub:DescribeAppVersionTemplate
              - resiliencehub:ListRecommendationTemplates
              - robomaker:GetWorldTemplateBody
              - s3-object-lambda:GetObject
              - sagemaker:Search
              - schemas:GetDiscoveredSchema
              - sdb:Get*
              - sdb:Select*
              - secretsmanager:*
              - securityhub:GetFindings
              - securityhub:GetMembers
              - securityhub:ListMembers
              - ses:GetTemplate
              - ses:GetEmailTemplate
              - ses:GetContact
              - ses:GetContactList
              - ses:ListTemplates
              - ses:ListEmailTemplates
              - ses:ListVerifiedEmailAddresses
              - signer:GetSigningProfile
              - signer:ListProfilePermissions
              - signer:ListSigningProfiles
              - sms-voice:DescribeKeywords
              - sms-voice:DescribeOptedOutNumbers
              - sms-voice:DescribePhoneNumbers
              - sms-voice:DescribePools
              - snowball:Describe*
              - sqs:Receive*
              - ssm-contacts:*
              - ssm:DescribeParameters*
              - ssm:GetParameter*
              - sso:Describe*
              - sso:Get*
              - sso:List*
              - storagegateway:DescribeChapCredentials
              - support:DescribeCommunications
              - timestream:ListDatabases
              - timestream:ListTables
              - transcribe:Get*
              - transcribe:List*
              - transfer:Describe*
              - transfer:List*
              - waf-regional:GetChangeToken
              - workmail:DescribeUser
              - workmail:GetMailUserDetails
              - workmail:ListUsers
            Effect: Deny
            Resource: "*"
      Roles: [!Ref nopsAccessIamRole]

  nopsSystemBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NopsSystemBucketPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${BucketName}-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::${BucketName}-${AWS::AccountId}/*"
      Roles: [!Ref nopsAccessIamRole]

  LambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "nops-cloud-account-registration-${AWS::Region}"
        S3Key: !Sub "nops_register_aws_acc-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "nops_register_aws_acc.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 150
      FunctionName: "nops-register-aws-account"
      Environment:
        Variables:
          api_key: !Ref nOpsApiKey
          external_id: !GetAtt TriggerLambdaGenUUID.external_id
          report_name: !Ref ReportName
          s3prefix: !Ref s3prefix
          private_key: !Ref nOpsPrivateKey
          iam_role_for_nops: !GetAtt nopsAccessIamRole.Arn
          s3_bucket_name_for_nops: !Sub "${BucketName}-${AWS::AccountId}"
          aws_acc_name_to_register_in_nops: !Sub "master-payer-${AWS::AccountId}"
    DependsOn:
      - nopsLambdaExecutionRole
      - nopsAccessIamRole

  PermissionLambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt [LambdaRegisterAwsAcc, Arn]
      Principal: "cloudformation.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"

  TriggerLambdaRegisterAwsAcc:
    Type: Custom::TriggerLambdaRegisterAwsAcc
    Properties:
      ServiceToken: !GetAtt [LambdaRegisterAwsAcc, Arn]
