AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation template to register AWS account to nOps"

Parameters: 
  ReportName:
    Type: String
    Default: nopsbilling-daily-gzip
    Description: nOps daily generated report name.

  s3prefix:
    Type: String
    Default: something
    Description: nOps daily generated reports folder prefix.

  BucketName:
    Type: String
    Default: nopsbucketforlogs
    Description: s3 bucket name for nOps daily reports.

  nOpsApiKey:
    Type: String
    NoEcho: true
    Description: nOps api key to register AWS accounts.

  AccNameToRegister:
    Type: String
    Description: Account name to register in nOps.

  nOpsPrivateKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: nOps private key to generate signature for api request, it should be single line string (optional).

  pGithubReleaseVersion:
    Type: String
    Default: v0.1.3
    Description: github release version.

Resources:
  rNopsDistBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  rNopsDistBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref rNopsDistBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub "${rNopsDistBucket.Arn}"
              - !Sub "${rNopsDistBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
            Principal: "*"
  
  rNopsZipCopierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ForwarderZipCopierRolePolicy0
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - "/"
                      - - Fn::GetAtt: "rNopsDistBucket.Arn"
                        - "*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::GetAtt: "rNopsDistBucket.Arn"

  rZipCopierLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies nOps Cloudtrail Forwarder zip to the destination S3 bucket
      Handler: index.handler
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import urllib.request
          import os

          def send_cfn_resp(event, context, response_status):
              resp_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See reasons in CloudWatch Logs - group: {context.log_group_name}, stream:{context.log_stream_name}',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }).encode('utf-8')
              req = urllib.request.Request(url=event['ResponseURL'], data=resp_body, method='PUT')
              with urllib.request.urlopen(req) as f:
                  logging.info(f'Sent response to CloudFormation: {f.status}, {f.reason}')
          def delete_zips(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()
          def copy_zip(source_zip_url, dest_zips_bucket, s3_file_name):
              s3 = boto3.client('s3')
              s3_prelude = "s3://"
              filename = s3_file_name
              if source_zip_url.startswith(s3_prelude):
                  parts = source_zip_url[len(s3_prelude):].split('/')
                  bucket = parts[0]
                  key = '/'.join(parts[1:])
                  response = s3.get_object(Bucket=bucket, Key=key)
                  data = response["Body"]
                  s3.upload_fileobj(data, dest_zips_bucket, filename)
              else:
                  with urllib.request.urlopen(source_zip_url) as data:
                      s3.upload_fileobj(data, dest_zips_bucket, filename)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              send_cfn_resp(event, context, 'FAILED')
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              logging.info(f'Received event: {json.dumps(event)}')
              try:
                  source_zip_url = event['ResourceProperties']['SourceZipUrl']
                  dest_zips_bucket = event['ResourceProperties']['DestZipsBucket']
                  s3_file_name = event['ResourceProperties']['PackageFileName']
                  if event['RequestType'] == 'Delete':
                      delete_zips(dest_zips_bucket)
                  else:
                      copy_zip(source_zip_url, dest_zips_bucket, s3_file_name)
              except Exception as e:
                  logging.exception(f'Exception when copying zip from {source_zip_url} to {dest_zips_bucket}')
                  send_cfn_resp(event, context, 'FAILED')
              else:
                  send_cfn_resp(event, context, 'SUCCESS')
              finally:
                  timer.cancel()
      Role: !GetAtt "rNopsZipCopierRole.Arn"

  rTriggerCopyGenUUIDPackage:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt "rZipCopierLambdaFunction.Arn"
      DestZipsBucket: !Ref "rNopsDistBucket"
      SourceZipUrl: !Sub "https://github.com/nops-io/nops-cloud-account-registration/releases/download/${pGithubReleaseVersion}/generate_external_id-${pGithubReleaseVersion}.zip"
      PackageFileName: !Sub "generate_external_id-${pGithubReleaseVersion}.zip"

  rTriggerCopyAccRegPackage:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt "rZipCopierLambdaFunction.Arn"
      DestZipsBucket: !Ref "rNopsDistBucket"
      SourceZipUrl: !Sub "https://github.com/nops-io/nops-cloud-account-registration/releases/download/${pGithubReleaseVersion}/nops_register_aws_acc-${pGithubReleaseVersion}.zip"
      PackageFileName: !Sub "nops_register_aws_acc-${pGithubReleaseVersion}.zip"

  nopsBucketForLogs:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !Sub '${BucketName}-${AWS::AccountId}'


  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref nopsBucketForLogs
      PolicyDocument:
        Version: 2012-10-17
        Id : 'Policy1335892530063'
        Statement:
          - Action:
              - 's3:GetBucketAcl'
              - 's3:GetBucketPolicy'
            Effect: Allow
            Sid: 'Stmt1335892150622'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref nopsBucketForLogs
            Principal: 
              Service: 'billingreports.amazonaws.com'
            Condition:
              StringEquals:
                  aws:SourceArn: !Sub 'arn:aws:cur:${AWS::Region}:${AWS::AccountId}:definition/*'
                  aws:SourceAccount: !Sub '${AWS::AccountId}'

          - Action:
              - 's3:PutObject'
            Effect: Allow
            Sid: 'Stmt1335892526596'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref nopsBucketForLogs
                - /*
            Principal: 
              Service: 'billingreports.amazonaws.com'
            Condition:
              StringEquals:
                  aws:SourceArn: !Sub 'arn:aws:cur:${AWS::Region}:${AWS::AccountId}:definition/*'
                  aws:SourceAccount: !Sub '${AWS::AccountId}'


  nopsReportDefinition:
    Type: AWS::CUR::ReportDefinition
    DependsOn: 
      - nopsBucketForLogs
      - BucketPolicy
    Properties: 
      AdditionalArtifacts: 
        - "REDSHIFT"
        - "QUICKSIGHT"
      AdditionalSchemaElements: 
        - "RESOURCES"
      Compression: "GZIP"
      RefreshClosedReports: true
      Format: "textORcsv"
      ReportName: !Ref ReportName
      ReportVersioning: "OVERWRITE_REPORT"
      S3Bucket: !Ref nopsBucketForLogs
      S3Prefix: !Ref s3prefix
      S3Region: !Sub '${AWS::Region}'
      TimeUnit: "DAILY"

  nopsLambdaExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "InlinePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaGenUUID:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "rNopsDistBucket"
        S3Key: !Sub "generate_external_id-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "generate_external_id.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 150
      FunctionName: "generate-external-id"
    DependsOn: 
      - nopsLambdaExecutionRole
      - rTriggerCopyAccRegPackage
      - rTriggerCopyGenUUIDPackage

  PermissionLambdaGenUUID:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaGenUUID, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn: 
      - LambdaGenUUID

  TriggerLambdaGenUUID:
    Type: Custom::TriggerLambdaGenUUID
    Properties:
      ServiceToken : !GetAtt [ LambdaGenUUID, Arn ]
    DependsOn: 
      - PermissionLambdaGenUUID

  nopsAccessIamRole: 
    Type: "AWS::IAM::Role"
    DependsOn: 
      - TriggerLambdaGenUUID
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS: "202279780353"
            Action: 
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                  sts:ExternalId: !GetAtt TriggerLambdaGenUUID.external_id
      Path: "/"
      Policies: 
        - PolicyName: "InlinePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - autoscaling:DescribeAutoScalingGroups
                  - ce:GetCostAndUsage
                  - ce:GetReservationPurchaseRecommendation
                  - ce:GetRightsizingRecommendation
                  - ce:GetSavingsPlansPurchaseRecommendation
                  - ce:GetReservationCoverage
                  - ce:GetReservationUtilization
                  - ce:GetSavingsPlansCoverage
                  - ce:GetSavingsPlansUtilization
                  - ce:GetSavingsPlansUtilizationDetails
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStacks
                  - cloudformation:GetTemplate
                  - cloudfront:ListDistributions
                  - cloudtrail:DescribeTrails
                  - cloudtrail:GetTrailStatus
                  - cloudtrail:LookupEvents
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - config:DescribeConfigurationRecorderStatus
                  - config:DescribeConfigurationRecorders
                  - config:DescribeDeliveryChannelStatus
                  - config:DescribeDeliveryChannels
                  - cur:DescribeReportDefinitions
                  - cur:PutReportDefinition
                  - dynamodb:DescribeContinuousBackups
                  - dynamodb:DescribeTable
                  - dynamodb:ListTables
                  - ec2:DescribeAddresses
                  - ec2:DescribeClientVpnConnections
                  - ec2:DescribeImages
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeFlowLogs
                  - ec2:DescribeNatGateways
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeReservedInstancesOfferings
                  - ec2:DescribeReservedInstances
                  - ec2:DescribeRouteTables
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSnapshots
                  - ec2:DescribeSubnets
                  - ec2:DescribeVolumes
                  - ec2:DescribeVpcs
                  - ecs:DescribeClusters
                  - ecs:ListClusters
                  - eks:ListClusters
                  - eks:DescribeCluster
                  - eks:DescribeNodegroup
                  - eks:ListNodegroups
                  - elasticache:DescribeCacheClusters
                  - elasticache:DescribeCacheSubnetGroups
                  - elasticache:DescribeReplicationGroups
                  - elasticfilesystem:DescribeFileSystems
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - es:DescribeDomains
                  - es:DescribeElasticsearchDomains
                  - es:DescribeReservedElasticsearchInstances
                  - es:DescribeReservedInstances
                  - es:ListDomainNames
                  - guardduty:ListDetectors
                  - iam:GetAccessKeyLastUsed
                  - iam:GetAccountPasswordPolicy
                  - iam:GetAccountSummary
                  - iam:GetLoginProfile
                  - iam:GetRole
                  - iam:ListAccessKeys
                  - iam:ListAccountAliases
                  - iam:ListAttachedGroupPolicies
                  - iam:ListAttachedUserPolicies
                  - iam:ListAttachedRolePolicies
                  - iam:ListGroupsForUser
                  - iam:ListMFADevices
                  - iam:ListRoles
                  - iam:ListUserPolicies
                  - iam:ListUsers
                  - iam:ListPolicyVersions
                  - iam:ListInstanceProfiles
                  - inspector:ListAssessmentRuns
                  - kms:ListKeys
                  - lambda:GetFunction
                  - lambda:GetPolicy
                  - lambda:ListFunctions
                  - organizations:DescribeAccount
                  - rds:DescribeDBInstances
                  - rds:DescribeDBSnapshots
                  - rds:DescribePendingMaintenanceActions
                  - rds:ListTagsForResource
                  - redshift:DescribeClusters
                  - s3:GetBucketAcl
                  - s3:GetBucketLogging
                  - s3:GetBucketPolicy
                  - s3:GetBucketPolicyStatus
                  - s3:GetBucketPublicAccessBlock
                  - s3:GetBucketVersioning
                  - s3:GetEncryptionConfiguration
                  - s3:ListAllMyBuckets
                  - ssm:ListComplianceSummaries
                  - support:DescribeCases
                  - support:DescribeTrustedAdvisorCheckRefreshStatuses
                  - support:DescribeTrustedAdvisorCheckResult
                  - support:DescribeTrustedAdvisorChecks
                  - tag:getResources
                  - tag:getTagKeys
                  - tag:getTagValues
                  - wellarchitected:*
                  - workspaces:DescribeWorkspaceDirectories
                  - workspaces:DescribeWorkspaces
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource:
                  - !Sub 'arn:aws:s3:::${BucketName}-${AWS::AccountId}'
                  - !Sub 'arn:aws:s3:::${BucketName}-${AWS::AccountId}/*'

  LambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "rNopsDistBucket"
        S3Key: !Sub "nops_register_aws_acc-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "nops_register_aws_acc.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 150
      FunctionName: "nops-register-aws-account"
      Environment:
        Variables:
          api_key: !Ref nOpsApiKey
          external_id: !GetAtt TriggerLambdaGenUUID.external_id
          report_name: !Ref ReportName
          s3prefix: !Ref s3prefix
          private_key: !Ref nOpsPrivateKey
          iam_role_for_nops: !GetAtt nopsAccessIamRole.Arn
          s3_bucket_name_for_nops: !Sub '${BucketName}-${AWS::AccountId}'
          aws_acc_name_to_register_in_nops: !Sub '${AccNameToRegister}-${AWS::AccountId}'
    DependsOn: 
      - nopsLambdaExecutionRole
      - nopsAccessIamRole
      - rTriggerCopyAccRegPackage
      - rTriggerCopyGenUUIDPackage

  PermissionLambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaRegisterAwsAcc, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"

  TriggerLambdaRegisterAwsAcc:
    Type: Custom::TriggerLambdaRegisterAwsAcc
    Properties:
      ServiceToken : !GetAtt [ LambdaRegisterAwsAcc, Arn ]