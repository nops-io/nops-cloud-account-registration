AWSTemplateFormatVersion: 2010-09-09
Description: "cloudformation template to register AWS account to nOps"

Parameters: 
  nOpsApiKey:
    Type: String
    NoEcho: true
    Description: nOps api key to register AWS accounts.

  AccNameToRegister:
    Type: String
    Description: Account name to register in nOps.

  nOpsPrivateKey:
    Type: String
    NoEcho: true
    Default: ''
    Description: nOps private key to generate signature for api request, it should be single line string (optional).

  pGithubReleaseVersion:
    Type: String
    Default: v0.1.8
    Description: github release version.

Resources:
  rNopsDistBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "aws:kms"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  rNopsDistBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref rNopsDistBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowSSLRequestsOnly
            Action:
              - s3:*
            Effect: Deny
            Resource:
              - !Sub "${rNopsDistBucket.Arn}"
              - !Sub "${rNopsDistBucket.Arn}/*"
            Condition:
              Bool:
                "aws:SecureTransport": "false"
            Principal: "*"
  
  rNopsZipCopierRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: ForwarderZipCopierRolePolicy0
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:GetObject
                Resource:
                  - Fn::Join:
                      - "/"
                      - - Fn::GetAtt: "rNopsDistBucket.Arn"
                        - "*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - Fn::GetAtt: "rNopsDistBucket.Arn"

  rZipCopierLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies nOps Cloudtrail Forwarder zip to the destination S3 bucket
      Handler: index.handler
      Runtime: python3.9
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import urllib.request
          import os

          def send_cfn_resp(event, context, response_status):
              resp_body = json.dumps({
                  'Status': response_status,
                  'Reason': f'See reasons in CloudWatch Logs - group: {context.log_group_name}, stream:{context.log_stream_name}',
                  'PhysicalResourceId': context.log_stream_name,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': {}
              }).encode('utf-8')
              req = urllib.request.Request(url=event['ResponseURL'], data=resp_body, method='PUT')
              with urllib.request.urlopen(req) as f:
                  logging.info(f'Sent response to CloudFormation: {f.status}, {f.reason}')
          def delete_zips(bucket):
              s3 = boto3.resource('s3')
              bucket = s3.Bucket(bucket)
              bucket.objects.all().delete()
          def copy_zip(source_zip_url, dest_zips_bucket, s3_file_name):
              s3 = boto3.client('s3')
              s3_prelude = "s3://"
              filename = s3_file_name
              if source_zip_url.startswith(s3_prelude):
                  parts = source_zip_url[len(s3_prelude):].split('/')
                  bucket = parts[0]
                  key = '/'.join(parts[1:])
                  response = s3.get_object(Bucket=bucket, Key=key)
                  data = response["Body"]
                  s3.upload_fileobj(data, dest_zips_bucket, filename)
              else:
                  with urllib.request.urlopen(source_zip_url) as data:
                      s3.upload_fileobj(data, dest_zips_bucket, filename)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              send_cfn_resp(event, context, 'FAILED')
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              logging.info(f'Received event: {json.dumps(event)}')
              try:
                  source_zip_url = event['ResourceProperties']['SourceZipUrl']
                  dest_zips_bucket = event['ResourceProperties']['DestZipsBucket']
                  s3_file_name = event['ResourceProperties']['PackageFileName']
                  if event['RequestType'] == 'Delete':
                      delete_zips(dest_zips_bucket)
                  else:
                      copy_zip(source_zip_url, dest_zips_bucket, s3_file_name)
              except Exception as e:
                  logging.exception(f'Exception when copying zip from {source_zip_url} to {dest_zips_bucket}')
                  send_cfn_resp(event, context, 'FAILED')
              else:
                  send_cfn_resp(event, context, 'SUCCESS')
              finally:
                  timer.cancel()
      Role: !GetAtt "rNopsZipCopierRole.Arn"

  rTriggerCopyGenUUIDPackage:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt "rZipCopierLambdaFunction.Arn"
      DestZipsBucket: !Ref "rNopsDistBucket"
      SourceZipUrl: !Sub "https://github.com/nops-io/nops-cloud-account-registration/releases/download/${pGithubReleaseVersion}/generate_external_id-${pGithubReleaseVersion}.zip"
      PackageFileName: !Sub "generate_external_id-${pGithubReleaseVersion}.zip"

  rTriggerCopyAccRegPackage:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt "rZipCopierLambdaFunction.Arn"
      DestZipsBucket: !Ref "rNopsDistBucket"
      SourceZipUrl: !Sub "https://github.com/nops-io/nops-cloud-account-registration/releases/download/${pGithubReleaseVersion}/nops_register_aws_acc-${pGithubReleaseVersion}.zip"
      PackageFileName: !Sub "nops_register_aws_acc-${pGithubReleaseVersion}.zip"

  rTriggerCopyFetchAliasPackage:
    Type: Custom::ForwarderZip
    Properties:
      ServiceToken: !GetAtt "rZipCopierLambdaFunction.Arn"
      DestZipsBucket: !Ref "rNopsDistBucket"
      SourceZipUrl: !Sub "https://github.com/nops-io/nops-cloud-account-registration/releases/download/${pGithubReleaseVersion}/fetch_aws_account_alias-${pGithubReleaseVersion}.zip"
      PackageFileName: !Sub "fetch_aws_account_alias-${pGithubReleaseVersion}.zip"

  nopsLambdaExecutionRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - PolicyName: "InlinePolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: 
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  LambdaGenUUID:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "rNopsDistBucket"
        S3Key: !Sub "generate_external_id-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "generate_external_id.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 150
      FunctionName: "generate-external-id"
    DependsOn: 
      - nopsLambdaExecutionRole
      - rTriggerCopyAccRegPackage
      - rTriggerCopyGenUUIDPackage

  PermissionLambdaGenUUID:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaGenUUID, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn: 
      - LambdaGenUUID

  TriggerLambdaGenUUID:
    Type: Custom::TriggerLambdaGenUUID
    Properties:
      ServiceToken : !GetAtt [ LambdaGenUUID, Arn ]
    DependsOn: 
      - PermissionLambdaGenUUID

  LambdaFetchAlias:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "rNopsDistBucket"
        S3Key: !Sub "fetch_aws_account_alias-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "fetch_aws_account_alias.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.9"
      Timeout: 20
      FunctionName: "fetch_aws_account_alias"
    DependsOn: 
      - nopsLambdaExecutionRole
      - rTriggerCopyAccRegPackage
      - rTriggerCopyGenUUIDPackage
      - rTriggerCopyFetchAliasPackage

  PermissionLambdaFetchAlias:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaFetchAlias, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"
    DependsOn: 
      - LambdaFetchAlias

  TriggerLambdaFetchAlias:
    Type: Custom::TriggerLambdaFetchAlias
    Properties:
      ServiceToken : !GetAtt [ LambdaFetchAlias, Arn ]
    DependsOn: 
      - PermissionLambdaFetchAlias

  nopsAccessIamRole: 
    Type: "AWS::IAM::Role"
    DependsOn: 
      - TriggerLambdaGenUUID
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              AWS: "202279780353"
            Action: 
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                  sts:ExternalId: !GetAtt TriggerLambdaGenUUID.external_id
      Path: "/"
      ManagedPolicyArns: [
        "arn:aws:iam::aws:policy/ReadOnlyAccess"
      ]

  nopsIntegrationPolicy:
    Type: AWS::IAM::Policy
    Properties:     
      PolicyName: "InlinePolicy"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
              - Action:                 
                  - cur:DescribeReportDefinitions
                  - cur:DeleteReportDefinition                  
                  - cur:PutReportDefinition
                  - events:CreateEventBus
                  - organizations:AcceptHandshake
                  - organizations:CancelHandshake
                  - organizations:DeclineHandshake
                  - organizations:InviteAccountToOrganization
                  - organizations:MoveAccount
                  - s3:HeadBucket
                  - s3:HeadObject                  
                  - support:DescribeTrustedAdvisorCheckRefreshStatuses
                  - support:DescribeTrustedAdvisorCheckResult
                  - support:DescribeTrustedAdvisorChecks
                  - wellarchitected:*
                Effect: "Allow"
                Resource: "*"
              - Action:
                  - acm-pca:Describe*
                  - acm-pca:Get*
                  - acm-pca:List*
                  - acm:Describe*
                  - acm:Get*
                  - acm:List*
                  - apigateway:GET
                  - appconfig:GetConfiguration*
                  - appflow:DescribeConnector*
                  - appflow:ListConnector*
                  - appstream:DescribeDirectoryConfigs
                  - appstream:DescribeUsers
                  - appstream:DescribeSessions
                  - appsync:Get*
                  - appsync:List*
                  - athena:Get*
                  - athena:List*
                  - backup:GetBackupVaultAccessPolicy
                  - cassandra:Select
                  - chime:Describe*
                  - chime:Get*
                  - chime:List*
                  - cloud9:Describe*
                  - cloud9:Get*
                  - cloud9:List*
                  - clouddirectory:Get*
                  - clouddirectory:List*
                  - cloudfront:GetCloudFrontOriginAccessIdentity 
                  - cloudfront:GetFieldLevelEncryption*
                  - cloudfront:GetKeyGroupConfig
                  - cloudwatch:GetMetricData
                  - cloudwatch:GetMetricStream
                  - cloudwatch:ListMetricStreams
                  - codeartifact:GetAuthorizationToken
                  - codeartifact:ReadFromRepository 
                  - codebuild:BatchGet*
                  - codebuild:ListSourceCredentials
                  - codecommit:BatchGet*
                  - codecommit:Get*
                  - codecommit:GitPull
                  - codedeploy:BatchGet*
                  - codedeploy:Get*
                  - codestar:DescribeUserProfile
                  - codestar:ListUserProfiles
                  - cognito-identity:*
                  - cognito-idp:*
                  - cognito-sync:*
                  - comprehend:Describe*
                  - comprehend:List*
                  - config:BatchGetAggregateResourceConfig
                  - config:BatchGetResourceConfig
                  - config:SelectAggregateResourceConfig
                  - config:SelectResourceConfig
                  - connect:Describe*
                  - connect:Get*
                  - connect:List*
                  - datapipeline:DescribeObjects
                  - datapipeline:EvaluateExpression
                  - datapipeline:QueryObjects
                  - dax:BatchGetItem
                  - dax:GetItem
                  - dax:Query
                  - deepcomposer:Get*
                  - deepcomposer:List*
                  - devicefarm:GetRemoteAccessSession
                  - devicefarm:ListRemoteAccessSessions
                  - directconnect:Describe*
                  - directconnect:List*
                  - discovery:Describe*
                  - discovery:Get*
                  - discovery:List*
                  - dms:Describe*
                  - dms:List*
                  - ds:Get*
                  - dynamodb:GetItem
                  - dynamodb:BatchGetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - ec2:GetConsoleScreenshot
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr-public:GetAuthorizationToken
                  - eks:DescribeIdentityProviderConfig
                  - elasticbeanstalk:DescribeConfigurationOptions
                  - elasticbeanstalk:DescribeConfigurationSettings
                  - es:ESHttpGet*
                  - fis:GetExperimentTemplate
                  - fms:GetAdminAccount
                  - frauddetector:BatchGetVariable
                  - frauddetector:Get*
                  - gamelift:GetGameSessionLogUrl
                  - gamelift:GetInstanceAccess
                  - geo:ListDevicePositions
                  - glue:GetSecurityConfiguration*
                  - glue:SearchTables
                  - glue:GetTable*
                  - guardduty:GetIPSet
                  - guardduty:GetMasterAccount
                  - guardduty:GetMembers
                  - guardduty:ListMembers
                  - guardduty:ListOrganizationAdminAccounts
                  - inspector2:GetConfiguration
                  - imagebuilder:GetImage
                  - iotroborunner:Get*
                  - iotsitewise:ListAccessPolicies
                  - ivs:GetPlaybackKeyPair
                  - ivs:GetStreamSession
                  - kafka:GetBootstrapBrokers
                  - kendra:Query*
                  - kinesis:Get*
                  - kms:DescribeKey
                  - kms:GetPublicKey
                  - lex:Get*
                  - lambda:GetFunctionConfiguration
                  - license-manager:GetGrant
                  - license-manager:GetLicense
                  - license-manager:ListTokens
                  - lightsail:GetBucketAccessKeys
                  - lightsail:GetCertificates
                  - lightsail:GetContainerImages
                  - lightsail:GetKeyPair
                  - lightsail:GetRelationalDatabaseLogStreams
                  - logs:GetLogEvents
                  - logs:StartQuery
                  - machinelearning:GetMLModel
                  - macie2:GetAdministratorAccount
                  - macie2:GetMember
                  - macie2:GetMacieSession
                  - macie2:SearchResources
                  - macie2:GetSensitiveDataOccurrences
                  - mobilehub:ExportProject
                  - nimble:GetStreamingSession
                  - polly:SynthesizeSpeech
                  - proton:GetEnvironmentTemplate
                  - proton:GetServiceTemplate
                  - proton:ListServiceTemplates
                  - proton:ListEnvironmentTemplates
                  - qldb:GetBlock
                  - qldb:GetDigest
                  - rds:Download*
                  - rekognition:CompareFaces
                  - rekognition:Detect*
                  - rekognition:Search*
                  - resiliencehub:DescribeAppVersionTemplate
                  - resiliencehub:ListRecommendationTemplates
                  - robomaker:GetWorldTemplateBody
                  - s3-object-lambda:GetObject
                  - sagemaker:Search
                  - schemas:GetDiscoveredSchema
                  - sdb:Get*
                  - sdb:Select*
                  - secretsmanager:*
                  - securityhub:GetFindings
                  - securityhub:GetMembers
                  - securityhub:ListMembers
                  - ses:GetTemplate
                  - ses:GetEmailTemplate
                  - ses:GetContact
                  - ses:GetContactList
                  - ses:ListTemplates
                  - ses:ListEmailTemplates
                  - ses:ListVerifiedEmailAddresses
                  - signer:GetSigningProfile
                  - signer:ListProfilePermissions
                  - signer:ListSigningProfiles
                  - sms-voice:DescribeKeywords
                  - sms-voice:DescribeOptedOutNumbers
                  - sms-voice:DescribePhoneNumbers
                  - sms-voice:DescribePools
                  - snowball:Describe*
                  - sqs:Receive*
                  - ssm-contacts:*
                  - ssm:DescribeParameters*
                  - ssm:GetParameter*
                  - sso:Describe*
                  - sso:Get*
                  - sso:List*
                  - storagegateway:DescribeChapCredentials
                  - support:DescribeCommunications
                  - timestream:ListDatabases
                  - timestream:ListTables
                  - transcribe:Get*
                  - transcribe:List*
                  - transfer:Describe*
                  - transfer:List*
                  - waf-regional:GetChangeToken
                  - workmail:DescribeUser
                  - workmail:GetMailUserDetails
                  - workmail:ListUsers
                Effect: Deny
                Resource: "*"
      Roles: [!Ref nopsAccessIamRole]

  nopsSystemBucketPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: NopsSystemBucketPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${SystemBucketID}"
              - !Sub "arn:aws:s3:::${SystemBucketID}/*"
              - !Sub "arn:aws:s3:::${SystemBucketID}-nops-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::${SystemBucketID}-nops-${AWS::AccountId}/*"
      Roles: [!Ref nopsAccessIamRole]

  LambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref "rNopsDistBucket"
        S3Key: !Sub "nops_register_aws_acc-${pGithubReleaseVersion}.zip"
      PackageType: Zip
      Handler: "nops_register_aws_acc.cloudformation_handler"
      Role: !GetAtt nopsLambdaExecutionRole.Arn
      Runtime: "python3.8"
      Timeout: 150
      FunctionName: "nops-register-aws-account"
      Environment:
        Variables:
          api_key: !Ref nOpsApiKey
          external_id: !GetAtt TriggerLambdaGenUUID.external_id
          private_key: !Ref nOpsPrivateKey
          iam_role_for_nops: !GetAtt nopsAccessIamRole.Arn
          aws_acc_name_to_register_in_nops: !Join [ "-", [!GetAtt TriggerLambdaFetchAlias.acc_alias, !Ref "AWS::AccountId" ]]
          is_member_acc: "True"
    DependsOn: 
      - nopsLambdaExecutionRole
      - nopsAccessIamRole
      - rTriggerCopyAccRegPackage
      - rTriggerCopyGenUUIDPackage


  PermissionLambdaRegisterAwsAcc:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ LambdaRegisterAwsAcc, Arn ]
      Principal: 'cloudformation.amazonaws.com'
      SourceAccount: !Ref "AWS::AccountId"

  TriggerLambdaRegisterAwsAcc:
    Type: Custom::TriggerLambdaRegisterAwsAcc
    Properties:
      ServiceToken : !GetAtt [ LambdaRegisterAwsAcc, Arn ]